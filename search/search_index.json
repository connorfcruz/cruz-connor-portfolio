{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":""},{"location":"#about-me","title":"About Me","text":"<p>I am Connor Cruz, a senior student in the Honors Java Data Structures and AP Networking programs at Charlotte Latin School. I am especially interested in mathematics, computer science, and artificial intelligence. Outside of class, I participate in Cross Country, Track &amp; Field, and am curerntly doing AI research. My favorite hobbies are running, programming, and learning higher mathematics. In the future, I hope to pursue a career in engineering or software management in medicine.</p>"},{"location":"#portfolio-navigation","title":"Portfolio Navigation","text":"<ul> <li>Honors Java Data Structures</li> <li>AP Networking</li> </ul>"},{"location":"ap-networking/","title":"AP Networking","text":""},{"location":"ap-networking/#ap-networking","title":"AP Networking","text":"<p>This is a page for AP Networking! Below are the assignments:</p>"},{"location":"ap-networking/#component-cards-and-software-slips","title":"Component Cards and Software Slips","text":"<p>This assignment goes over the hardware and software in a computer.</p>"},{"location":"h-jds/","title":"Honors Java Data Structures","text":""},{"location":"h-jds/#honors-java-data-structures","title":"Honors Java Data Structures","text":"<p>This is a page for Honors Java Data Structures. There is no work as of now.</p>"},{"location":"networking/assignment1/","title":"Component Cards and Software Slips","text":""},{"location":"networking/assignment1/#component-cards-and-software-slips","title":"Component Cards and Software Slips","text":""},{"location":"networking/assignment1/#project-overview","title":"Project Overview","text":"<p>Problem Statement:</p> <p>Although many people use computers on a daily basis, few know about the individual components, both hardware and software, which actually control how that computer functions. To remedy this problem, this assignment introduces students to the hardware and how signal flows from one component to the next, as well as how each software component interacts with or allows for the next to perform its function.</p> <p>Objectives:</p> <ul> <li>Learn what a protocol is and the difficulty of conveying information.</li> <li>Know what hardware components are and why they matter.</li> <li>Know how each piece of hardware interacts with the rest.</li> <li>Learn software and their interactions.</li> </ul> <p>Success Criteria:</p> <p>Be able to identify hardware/software given their definition or function, and also know how to do the opposite. </p>"},{"location":"networking/assignment1/#design-planning","title":"Design &amp; Planning","text":""},{"location":"networking/assignment1/#silent-signals","title":"Silent Signals","text":"<p>This is a diagram of the finalized protocol for Silent Signals. Specifically, this solves the problem of communicating</p> <ul> <li>Yes/No answers</li> <li>Numbers</li> <li>Months</li> </ul> <p>all in the same message, using only a card with two faces: one blue and one white.</p> <p>Note that this solution requires tapping the card, which was later found out to be prohibited.</p>"},{"location":"networking/assignment1/#hardware-and-software","title":"Hardware and Software","text":"<p>Hardware Diagram:</p> <p>The first diagram shows how hardware components interact with each other step by step to type a sentence and save it.</p> <p></p> <p>Here is my thought process behind this:</p> <ul> <li>PSU: Powers the entire system</li> <li>Motherboard: PSU connects to the motherboard to power and link the other components</li> <li>Cooling system: Applies to everything controlled by the motherboard</li> <li>I/O Device (Keyboard): Serves as input for when the user types, so goes into the motherboard</li> <li>CPU: Interacts with the RAM and Storage to get/send th text data, and sends data for the GPU to display</li> <li>RAM: Stores the typed text short-term</li> <li>GPU: Renders graphics and output them on an I/O device (Monitor)</li> <li>Storage: When the text is saved, it is stored here</li> </ul> <p>The generally accepted diagram by the class was Arshia's, shown below. This differs from mine in that it shows every interaction between components rather than a step-by-step diagram.</p> <p></p> <p>Software Diagram:</p> <p>This diagram shows how the software in a computer interacts to download a file and open it via a graphics program.</p> <p></p> <p>Here is my thought process:</p> <ul> <li>Firmware/UEFI: Starts the computer and allows the OS to run</li> <li>Virtual Machine/Runtime Environment: The base of the OS; also necessary for the OS to run</li> <li>OS: manages other software applications</li> <li>Device Drivers: Go both in and out from the OS to interact with hardware components</li> <li>Security/Encryption Layer: Goes in and out from the OS for sending a request and receiving the downloaded file to ensure security</li> <li>Networking Stack Layer: Downloads the file and goes through security/encryption layer to protect the OS</li> <li>File System Layer: Allows for file management to save the downloaded file</li> <li>Applications: Run from the file system layer; in this case, it is the graphics program</li> <li>Libraries/Runtimes: Provide necessary resources for groups of applications</li> </ul> <p>Hardware/Software Diagram:</p> <p>This diagram shows how hardware and software interact for printing an English paper.</p> <p></p> <p>The interactions on this diagram can be generalized from the others. A notable point is that the device drivers interact between the OS and many hardware components. Furthermore, the Security/Encryption Layer, Networking Stack Layer, and NIC are not necessary because there is no requirement of network connection (assuming a local text editing program such as Word).</p>"},{"location":"networking/assignment1/#technical-development","title":"Technical Development","text":""},{"location":"networking/assignment1/#components-song","title":"Components Song:","text":"<p>This song describes the function of computer hardware in a rap beat.</p> <p></p> Lyrics: <p>[Verse 1] Yo, the brain of the beast, call it CPU, Calculatin\u2019 every move, every click you do. Clock ticks quick, instructions in a queue, Arithmetic and logic, keepin\u2019 it true.</p> <p>RAM\u2019s the sprinter, short-term speed, Holdin\u2019 what you need, while the programs feed. Temporary thoughts, fast as a steed, But cut the power, gone\u2014won\u2019t succeed.</p> <p>Storage, that\u2019s memory for the long haul, SSD\u2019s flash, no spin at all. HDD, old school, disks gotta crawl, But both save your files, big or small.</p> <p>[Chorus] It\u2019s the tech inside, it\u2019s the heart, the soul, Each piece in sync, makin\u2019 the system whole. From the brain to the power, every role defined, Understand the parts, you control the grind.</p> <p>[Verse 2] GPU, the artist, paintin\u2019 the screen, Renderin\u2019 dreams in pixels so clean. 3D worlds, movies pristine, Gamers and creators, it\u2019s the unseen machine.</p> <p>Motherboard\u2019s the hub, connections unite, Pathways and circuits, keepin\u2019 it tight. All roads lead here, no part\u2019s in flight, Communication central, day or night.</p> <p>[Verse 1] Yo, the brain of the beast, call it CPU, Calculatin\u2019 every move, every click you do. Clock ticks quick, instructions in a queue, Arithmetic and logic, keepin\u2019 it true.</p> <p>RAM\u2019s the sprinter, short-term speed, Holdin\u2019 what you need, while the programs feed. Temporary thoughts, fast as a steed, But cut the power, gone\u2014won\u2019t succeed.</p> <p>Storage, that\u2019s memory for the long haul, SSD\u2019s flash, no spin at all. HDD, old school, disks gotta crawl, But both save your files, big or small.</p> <p>[Chorus] It\u2019s the tech inside, it\u2019s the heart, the soul, Each piece in sync, makin\u2019 the system whole. From the brain to the power, every role defined, Understand the parts, you control the grind.</p> <p>[Verse 2] GPU, the artist, paintin\u2019 the screen, Renderin\u2019 dreams in pixels so clean. 3D worlds, movies pristine, Gamers and creators, it\u2019s the unseen machine.</p> <p>Motherboard\u2019s the hub, connections unite, Pathways and circuits, keepin\u2019 it tight. All roads lead here, no part\u2019s in flight, Communication central, day or night.</p> <p>[Chorus]</p> <p>[Verse 3] PSU\u2019s the lifeline, feedin\u2019 the juice, Convertin\u2019 AC to DC, lettin\u2019 volts loose. No power? No play\u2014nothing to produce, Wattage on point, keepin\u2019 tight with no excuse.</p> <p>NIC\u2019s the bridge, to the net it connects, Sendin\u2019 data fast, keepin' all in check. Ethernet or Wi-Fi, commands it directs, Online or LAN-side, it earns your respect.</p> <p>Coolin\u2019 the heat, fans or the liquid flow, Keepin\u2019 temps low when performance grows. Overclock dreams? You better know, Without that chill, your system won\u2019t go.</p>"},{"location":"networking/assignment1/#build-a-pc-challenge","title":"Build-A-PC Challenge","text":"<p>In this challenge, a computer was optimized for gaming with a $1000 budget. This was also done with a partner.</p> <p>The given (non-upgraded) components are as follows: - CPU: mid-range 4-core processor - RAM: 8 GB - Storage: 256 GB SSD - GPU: basic integrated graphics - PSU: 500W basic model - Standard cooling - Basic NIC (network card) - Motherboard that supports most modern upgrades</p> <p>Here are the upgrades that were performed:</p> Component Upgrade Chosen Why It Matters CPU High-end 8-core processor ($300) A good CPU is important for general computer function RAM 16 GB total RAM ($150) Good RAM allows more applications to be open which support the game Storage 512 GB SSD ($150) Not much storage is necessary unless there are many games; modern games can be up to 100 GB, if not more GPU Mid-range graphics card ($250) A good graphics card allows games to be more enjoyable and run more smoothly/cleanly NIC 2.5 Gbps network card ($100) Most games need a connection to the internet Total Cost: $950 <p>The priority of each upgrade is shown below:</p> <ol> <li>CPU</li> <li>GPU</li> <li>RAM</li> <li>NIC</li> <li>Storage</li> </ol>"},{"location":"networking/assignment1/#testing-and-evaluation","title":"Testing and Evaluation","text":"<p>Although there was not much testing of the ideas shown in the Design/Planning and Technical Development sections, Silent Signals required testing and evaluation when moving between partners.</p> <p>Initial Run-Through:</p> <p>With my first partner, we struggled very much to find a common form of communication with the blue and white cards, as there was no way to plan a strategy beforehand. We particularly struggled to represent distance (since it was unitless) and months.</p> <p>Between Partners:</p> <p>Between partners, a refined method was established for communication since communication with the first partner was very difficult. A modified version of this process is shown above in the Silent Signals diagram.</p> <p>Second Run-Through:</p> <p>My second parter had also come up with a refined protocol, so we spent the first couple of moments together merging our two protocols. From there, we were able to communicate information much more successfully, and there was less confusion overall. However, since some questions required relaying new types of information that our shared protocol didn't account for, we struggled with these questions.</p>"},{"location":"networking/assignment1/#reflection-and-analysis","title":"Reflection and Analysis","text":"<p>Through the Silent Signals activity, I learned the definition of a protocol and how specific and shared protocols are necessary for computers to even convey a small amount of basic information. I refined my protocol to include different types of data to convey, which likely emulates how actual computer protocols are modified to support transfer of many types of information. In Component Cards and Software Slips, I learned many things about computer components, software, and their functions, which I had not known before. Most of the new information I learned in this lesson was about the computer software, as I have not had much experience with that in the past. In this activity, I had to carefully think through each process and the involved interactions, which was difficult even with my finished hardware/software diagrams. As a whole, this activity is very useful for understanding the foundation of a computer, which provides the basis of a more robust understanding of other Networking concepts to come (e.g. protocols, data packaging, etc.). While I do think that my diagrams could have some small adjustments and be refined further, they convey the general flow of data well. As such, using them as reference is likely to help for the AP exam and to quickly review what each hardware and software component does.</p>"},{"location":"networking/assignment2/","title":"Command Line Interface","text":""},{"location":"networking/assignment2/#command-line-interface","title":"Command Line Interface","text":""},{"location":"networking/assignment2/#project-overview","title":"Project Overview","text":"<p>Problem Statement:</p> <p>In some cases, as well as in the past, having a graphical user interface to interact with a computer either took up very many resources or was simply not available. Thus, this activity teaches students how to navigate and use a command line interface, performing actions such as creating files, moving files, and changing the working directory.</p> <p>Objectives:</p> <ul> <li>Know what a virtual machine does, as well as applications</li> <li>Know how to use a Linux (specifically Ubuntu) virtual machine and deal with the Linux terminal</li> <li>Learn basic commands (e.g. pwd and cd) to move through directories and understand absolute vs. relative paths</li> <li>Learn how to make, delete, move, copy, and edit files via terminal commands</li> </ul> <p>Objectives (Troubleshooting Network Issues):</p> <ul> <li>Identify and interpret different IP addresses and their significance in network troubleshooting.</li> <li>Execute terminal commands to diagnose network connectivity issues on both Mac and Ubuntu systems.</li> <li>Compare and analyze network configurations in different VM networking models (Shared and Bridged).</li> <li>Apply a systematic troubleshooting methodology to diagnose network connectivity problems.</li> </ul> <p>Success Criteria:</p> <p>Complete several activities, such as \"House Sitting Adventure,\" to demonstrate mastery of command line navigation in the Ubuntu virtual machine.</p>"},{"location":"networking/assignment2/#design-and-planning","title":"Design and Planning","text":""},{"location":"networking/assignment2/#due-dates-and-objectives","title":"Due Dates and Objectives","text":"<p>Map the Maze Part 1</p> <ul> <li>Due Date: September 2nd, 2025</li> <li>Objective: Learn basic CLI commands</li> </ul> <p>Map the Maze Part 2</p> <ul> <li>Due Date: Septemer 10th, 2025</li> <li>Objective: Apply CLI commands in an Ubuntu Virtual Machine, and learn how to navigate a real file system</li> </ul> <p>House Sitting Adventure</p> <ul> <li>Due Date: September 12th, 2025</li> <li>Objective: Apply everything learned from the previous activities to navigate a given directory without guidance</li> </ul>"},{"location":"networking/assignment2/#map-the-maze-part-1","title":"Map The Maze (Part 1)","text":"<p>Useful Definitions/Examples</p> Term Definition Example Root Directory The highest directory in the file system from which everything branches \"C:\\\" for PC, \"/\" for Mac Folder/Directory Organizes files or other folders \"Desktop\" in the home directory File Object which stores data; has a name and (usually) an extension Text documents Path Shows location of a file/folder in the file system; represents the address of a file \"~/Desktop/notes.txt\" Absolute Path The entire address of a file/folder, starting with the root directory \"/Users/Cruz/Music/song.mp3\" Relative Path The location of a file relative to the working directory \"essay.docx\" if the working directory has that file <p>File System Tree Activity</p> <p>In this activity, students created an example diagram displaying how directories and files are organized and interact with each other by making a file system tree.</p> <p>Initially, students were tasked to create a top-down diagram starting from the root directory with:</p> <ul> <li>A home directory</li> <li>Three subfolders</li> <li>At least two sample files</li> </ul> <p>Here is the diagram:</p> <p></p> <p>Afterwards, that diagram was used to create a text version of the file system tree made previously.</p> <p>This is the text diagram:</p> <pre><code>/\n|_Connor\n| |-Downloads\n| | |-SoftwareDiagram.jpg\n| | |_TheTechInside.mp3\n|-Desktop\n| |-BinarySearch.java\n| |_people-100.csv\n|_Documents\n  |-LitEssay.docx\n  |_CruzDiatomics.xslx\n</code></pre> <p>Command Definitions</p> Term Definition pwd Prints the full path of the working directory ls Lists files/subfolders in the working directory cd Changes the working directory mkdir Makes a directory in the working directory touch Creates an empty file cp Duplicates a file or directory mv Moves a file or directory OR renames a file/directory open Opens a file/directory rm Removes a file; CANNOT BE UNDONE <p>Mac File System Tree</p> <p>With the knowledge of basic terminal commands, students were also tasked to create example directories and files in their Mac computers, then navigate through them, doing as follows: - Create a directory in home called \"Practice\" - Make three folders in Practice: Docs, Photos, and Music - Create a file named \"notes.txt\" in Docs - Move notes.txt into Music - Change the working directory to Music, and print the working directory</p> <p>These tasks were accomplished using knowledge of the following commands:</p> <ul> <li>cd to change directories</li> <li>mkdir to create a folder</li> <li>touch to create a file</li> <li>mv to move a file</li> <li>pwd to print the working directory</li> </ul> <p>The final tree structure after this process is:</p> <pre><code>/\n|_Users\n  |_26cruzc\n    |_Practice\n      |-Docs\n      |-Photos\n      |_Music\n        |_notes.txt\n</code></pre> <p>When printing the working directory via 'pwd', this path was obtained: <code>/Users/26cruzc/Practice/Music</code></p> <p>This matched the path which was obtained through Finder, so it was confirmed that 'pwd' returned the correct working directory.</p>"},{"location":"networking/assignment2/#the-linux-command-line-for-beginners-tutorial","title":"The Linux Command Line For Beginners (Tutorial)","text":"<p>This activity allowed for students to learn basic Ubuntu (or othe Linux version) terminal commands and the general layout of Ubuntu's CLI.</p> <p>The tutorial used can be found here.</p> <p>Opening a Teminal</p> <p>This section allowed users to become familiar with these commands learned previously: 'cd' and 'pwd'.</p> <p>For 'cd', some useful concepts learned were that '~' represents the home directory, and that '..' represents the parent directory.</p> <p>A new command was also learned: 'whoami', which returns the username of the person running the command.</p> <p></p> <p>Creating Folders and Files</p> <p>Note that many of the commands run are not shown due to the computer running the VM being reset. However, the part shown summarizes the concepts learned.</p> <p>In summary, this part of the activity taught the following:</p> <ul> <li>Linux's CLI makes it such that 'mkdir word1 word2' makes two separate directories 'word1' and 'word2' rather than 'word1 word2'</li> <li>Spaces (and other special characters in Linux CLI) can be escaped using the '\\' character</li> <li>The '&gt;' command writes the output of a command to a file</li> <li>'echo' returns its argument</li> <li>'cat' with more than one argument concatenates the contents of files as a single block of text</li> <li>'&gt;&gt;' appends an output to a file</li> </ul> <p></p> <p>Moving and Manipulating Files</p> <p>This section goes over commands to move, copy, and remove files, which were mostly dealt with in Map the Maze Part 1:</p> <ul> <li>'mv' moves the first arguments into the final argument</li> <li>If 'mv' is run with two file/directory arguments of the same type, it will rename the first argument to the second</li> <li>'cp' copies its first arguments into its last argument (which can be either a file or directory)</li> <li>'rm' can remove a file but cannot remove a directory</li> <li>'rmdir' is used to remove directories</li> <li>'rm -r' remoevs a directory and all of its contents, which can be dangerous</li> </ul> <p></p> <p>A Bit of Plumbing</p> <p>Although this section was not required, it is useful to know for general use. It primarily introduced the pipe command:</p> <ul> <li>The output of the left side of the pipe command '|' is input as an argument to the right side of the pipe command</li> <li>Multiple pipes can be used in succession, going from left to right</li> <li>'sort' sorts the contents of a file alphabetically</li> <li>'wc' gets the word count of a file, and 'wc -l' gets the line count</li> </ul> <p></p> <p>The Command Line and Superuser</p> <p>This section goes over permissions:</p> <ul> <li>The 'su' command allows the user to change to the root user without logging out and logging back in</li> <li>'sudo' is a prefix to a command which is to be run with administrator privileges</li> </ul> <p>While there was some code written for this segment, it does not pertain much to the concepts taught.</p> <p>Hidden Files</p> <p>This section briefly taught about how to denote hidden files:</p> <ul> <li>Hidden files/directories always start with a '.'</li> <li>To reveal hidden files/directories when using a command, add the '-a' switch</li> </ul>"},{"location":"networking/assignment2/#troubleshooting-network-issues-mac","title":"Troubleshooting Network Issues (Mac)","text":"<p>This assignment explained the fundamental troubleshooting process:</p> <ol> <li>Determine if the device is connected.</li> <li>Check if the device is assigned an IP address.</li> <li>Check if the device can reach the internet.</li> <li>Check if DNS is functional (i.e. it can look up names).</li> </ol> <p>Device Connection/IP Address</p> <p>To check for a device's IP address (on a Mac), one must use the <code>ifconfig</code> command. If the Mac is connected to the router via ethernet, an active IP address should be displayed on en0. However, if it is connected to the router via Wi-Fi, en1 should be active instead.</p> <p>Here is the output when <code>ifconfig</code> was run:</p> <p></p> <p>Note that the Mac connected to the router via Wi-Fi, so en1 being active makes sense.</p> <p>To see what happens when the device is not connected, the Wi-Fi was turned off on the Mac by toggling the Wi-Fi switch. As a result, both en0 and en1 became inactive:</p> <p></p> <p>When reconnecting to Wi-Fi, the same results as the initial run  of <code>ifconfig</code> were output.</p> <p>Reachability</p> <p>To determine reachability of websites, the <code>ping</code> command was used with the desired IP address. Two common addresses for using this command are <code>8.8.8.8</code> (Google) and <code>1.1.1.1</code> (Cloudflare). Note that with these pings, the <code>-c</code> switch was appended with the argument '4' to signify that it was to retrieve 4 packets.</p> <p>The ping command essentially sends a signal to a desired server (designated by the desired IP address), and the server sends packets back to the host device. The time in milliseconds for the host device to receive these packets is also noted.</p> <p>This is the output when <code>ping</code> was run:</p> <p></p> <p>When comparing the ping times between Google DNS and Cloudflare DNS, Google's server obtained a faster response time (18.664 ms compared to 20.725 ms). Two possible reasons for this disparity are:</p> <ul> <li>Cloudflare's host server's location might be farther.</li> <li>Cloudflare requires more intermediary steps to access.</li> </ul> <p>Finding the Default Gateway</p> <p>The default gateway of a device is generally its router. To obtain its IP address, one of the following commands can be used:</p> <p>Mac</p> <ul> <li><code>netstat -nr | grep default</code></li> <li><code>route -n get default</code></li> </ul> <p>Linux:</p> <ul> <li><code>ip route</code></li> <li><code>netstat -rn</code></li> </ul> <p>Here is the output when accessing the default gateway on both Mac and Linux:</p> <p></p> <p></p> <p>When pinging the default gateway, the response time is also expected to be faster because the router must be accessed before going to external servers. The router is also much closer physically.</p> <p>DNS</p> <p>To check if DNS works, one must first determine that accessing servers by IP address works. Then, the <code>ping</code> command must be run again with a text-based argument. For example, the command <code>ping -c 4 google.com</code> can be performed.</p> <p></p> <p></p>"},{"location":"networking/assignment2/#troubleshooting-network-issues-ubuntu","title":"Troubleshooting Network Issues (Ubuntu)","text":"<p>Device Connection/IP Address</p> <p>To obtain the IP address of an Ubuntu virtual machine, the command <code>ip addr</code> is run. In the case of the Ubuntu VM, the IP address is found under enp0s1.</p> <p>There are two primary modes to assign an IP address to a Virtual Machine: Shared and Bridged Mode.</p> <p>Shared Mode:</p> <p>In shared mode, the IP address of the virtual machine is assigned by the host device. It is assigned a private IP address, so it is not able to interact with any other devices connected to the router. Furthermore, any traffic going in our out of the virtual machine must go through the host device first.</p> <p>This is the output of <code>ip addr</code> when in Shared Mode:</p> <p></p> <p>As shown in the image, the Mac address is 1a:63:23:39:a4:2c, which can be found next to link/ether. </p> <p>The VM's address is displayed next to inet: 192.168.64.2/24.</p> <p>Bridged Mode:</p> <p>In bridged mode, the virtual machine acts as its own separate machine. The VM is usually assigned its own IP address by the router, and it can be accessed independently of the host machine. However, Bridged Mode may pose security risks since it is unmonitored by the host system and has direct access to the local network.</p> <p>Here is the output when <code>ip addr</code> is run in Bridged Mode:</p> <p></p> <p>As shown in the image, the Mac address is 1a:63:23:39:a4:2c, which is the same as in Shared Mode.</p> <p>However, the VM's address is 10.12.24.209/20, which is different than in Shared Mode.</p> <p>Despite being in Bridged Mode, the Virtual Machine can still ping the Mac. This is because the VM can access the Mac via the router's connection.</p> <p>Reachability</p> <p>To test reachability on Ubuntu, the same command as Mac is used: <code>ping -c 4 8.8.8.8</code>.</p> <p>Note that the ping package may have to be installed prior to running this command.</p> <p>Here is the output when ping is run:</p> <p></p> <p>DNS</p> <p>Testing DNS is also the same as in Mac, using the command <code>ping -c 4 google.com</code>.</p>"},{"location":"networking/assignment2/#technical-development","title":"Technical Development","text":""},{"location":"networking/assignment2/#map-the-maze-part-2","title":"Map The Maze (Part 2)","text":"<p>Using the commands learned during Map The Maze (Part 1), they were similarly applied to the terminal of a Linux virtual machine running on Ubuntu. This activity also entailed linking a directory in the host system to the virtual machine and moving files between them.</p> <p>This command was used to print the working directory, serving as a review of previously learned concepts:</p> <pre><code>ubuntu@ubuntu:~$ pwd\n/home/ubuntu\n</code></pre> <p>This segment changes the directory to 'Documents' and prints the working directory, which is confirmed to be Documents:</p> <pre><code>ubuntu@ubuntu:~$ cd Documents\n\nubuntu@ubuntu:~/Documents$ pwd\n/home/ubuntu/Documents\n</code></pre> <p>In Documents, the MazeGame directory was made using 'mdir', and 'ls' confirms that it was made successfully:</p> <pre><code>ubuntu@ubuntu:~/Documents$ mkdir MazeGame\n\nubuntu@ubuntu:~/Documents$ ls\nMazeGame\n</code></pre> <p>This segment moves the working directory to MazeGame and creates three txt files using the 'touch' command:</p> <pre><code>ubuntu@ubuntu:~/Documents$ cd MazeGame\n\nubuntu@ubuntu:~/Documents/MazeGame$ touch clue1.txt clue2.txt clue3.txt\n\nubuntu@ubuntu:~/Documents/MazeGame$ ls\nclue1.txt clue2.txt clue3.txt\n</code></pre> <p>Nano is used to edit clue1.txt:</p> <pre><code>ubuntu@ubuntu:~/Documents/MazeGame$ nano clue1.txt\n</code></pre> <p>Here is the nano UI, which allowed for clue1.txt to be written to and saved:</p> <p></p> <p>This segment copies clue1.txt to '~/hostshare', which required administrator priviliges. To obtain these privileges, 'sudo' was used:</p> <pre><code>ubuntu@ubuntu:~/Documents/MazeGame$ sudo cp clue1.txt ~/hostshare\n[sudo] password for ubuntu:\n\nubuntu@ubuntu:~/Documents/MazeGame$ ls ~/hostshare\nclue1.txt\n</code></pre> <p>To copy a file from the Mac to MazeGame, the 'Shared Directory' value in the UTM had to be changed. For the purposes of this assignment, the 'Desktop' folder in the host system was chosen.</p> <p>After restarting the VM, it was then required to link ~/hostshare and the shared directory (Desktop) via the following command:</p> <pre><code>ubuntu@ubuntu:~$ sudo mount -t davfs http://127.0.0.1:9843/ ~/hostshare/\n</code></pre> <p>The directory is changed to hostshare, and 'ls' confirms that th files from the host system's Desktop folder are shared. 'mv' is also used to move the screenshot in hostshare to MazeGame:</p> <pre><code>ubuntu@ubuntu:~$ cd hostshare\n\nubuntu@ubuntu:~/hostshare$ ls\n'Screenshot 2025-09-05 at 2.23.11 PM.png'\n\nubuntu@ubuntu:~/hostshare$ mv 'Screenshot 2025-09-05 at 2.23.11 PM.png' ~/Documents/MazeGame\n\nubuntu@ubuntu:~/hostshare$ cd ~/Documents/MazeGame\n</code></pre> <p>This command confirms that the screenshot was successfully moved to MazeGame:</p> <pre><code>ubuntu@ubuntu:~/Documents/MazeGame$ ls\n'Screenshot 2025-09-05 at 2.23.11 PM.png'   clue2.txt\nclue1.txt                                   clue3.txt\n</code></pre> <p>Similarly to above, 'ls' is run, but with the '-a' switch added. This switch allows for all files/directories to be shown, including hidden files:</p> <pre><code>ubuntu@ubuntu:~/Documents/MazeGame$ ls -a\n.   'Screenshot 2025-09-05 at 2.23.11 PM.png'   clue2.txt\n..  clue1.txt                                   clue3.txt\n</code></pre> <p>Another student created a sercet file on this VM. This file was found using 'ls -a' and printed using the 'cat' command:</p> <pre><code>ubuntu@ubuntu:~/Documents/MazeGame$ ls -a\n.   .secret.txt                                 clue1.txt   clue3.txt\n..  'Screenshot 2025-09-05 at 2.23.11 PM.png'   clue2.txt   \n\nubuntu@ubuntu:~/Documents/MazeGame$ cat .secret.txt\nThis is secret :O\n</code></pre>"},{"location":"networking/assignment2/#testing-and-evaluation","title":"Testing and Evaluation","text":""},{"location":"networking/assignment2/#map-the-maze-part-3","title":"Map The Maze (Part 3)","text":"<p>To evaluate students' knowledge of the command line interface, they used Linux commands to navigate and modify a pre-made 'House' directory. </p> <p>The GitHub repository in which this directory can be found is linked here.</p> <p>To start, the commands below perform the following:</p> <ol> <li>Navigate into the house directory using 'cd'</li> <li>Check possible places to navigate to using 'ls'</li> </ol> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration$ ls\nREADME.md house\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration$ cd house\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ ls\nbedroom1    bedroom2    garage    kitchen   main_entrance\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n</code></pre> <p>The next segment completes the following:</p> <ol> <li>Navigate into the main entrance (using 'cd')</li> <li>Find and open a set of instructions in the main entrance (using 'ls' and 'open')</li> <li>Return to the house level (using 'cd')</li> </ol> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ cd main_entrance\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/main_entrance$ ls\ninstructions.txt    unopened_mail1.txt    unopened_mail3.txt\nshoerack            unopened_mail2.txt\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/main_entrance$ open instructions.txt\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/main_entrance$ cd ..\n</code></pre> <p>This segment checks the kitchen, \"eats food\" (deletes files), and checks for hidden files. Using 'rm' successfully removed the two food items specified.</p> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ cd kitchen\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/kitchen$ ls -a\n.   ..    .rotten_bananas   banana    cereal    crackers    donut   milk    orange\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/kitchen$ rm cereal .rotten_bananas\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/kitchen$ ls -a\n.   ..    banana    crackers    donut   milk    orange\n</code></pre> <p>This next segment searches the bedrooms thoroughly and checks the current location in the house with 'pwd'. As shown below, a secret diary was found in Bedroom 1, and but Bedroom 2 did not contain any notable files.</p> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/kitchen$ cd ../bedroom1\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom1$ ls -a\n.   ..    .secret_diary.txt\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom1$ cd ../bedroom2\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom2$ ls -a\n.   ..    chair   desk    messy_bed\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom2$ ls desk\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom2$ open desk/search_desk.txt\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom2$ pwd\n/home/ubuntu/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity -\nHouse Exploration/house/bedroom2\n</code></pre> <p>This segment searches the garage and does the following:</p> <ol> <li>Removes all garbage using rm g* (removing any file that starts with a 'g')</li> <li>Moves into each cardboard box directory using 'cd' and checks for trash using 'ls'</li> <li>Removes cardboard_box and cardboard_box 2, as well as their contents, using 'rm' with the '-r' switch</li> <li>Checks which files remain using 'ls -a' to confirm that all garbage and boxes with trash were removed</li> </ol> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/bedroom2$ cd ../garage/\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$ ls -a\n.   cardboard_box   cardboard_box3    garbage1    garbage3\n..  cardboard_box2  garbage           garbage2    hose\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$ rm g*\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$ cd cardboard_box\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box$ ls -a\n.   ..    cardboard_box\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box$ cd cardboard_box/cardboard_box\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box/cardboard_box/cardboard_box$ ls\ntrash\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box/cardboard_box/cardboard_box$ cd \n../../../cardboard_box2\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box2$ ls\ntrash\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box2$ cd ../cardboard_box3\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box3$ ls\nfamily_pictures\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage/cardboard_box3$ cd ..\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$ rm -r cardboard_box cardboard_box2\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$ ls -a\n.   ..    cardboard_box3    hose\n</code></pre> <p>These commands move the user to the house directory then create and edit a txt file called 'note.txt' using nano:</p> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/garage$ cd ..\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ touch note.txt\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ nano note.txt\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ cat note.txt\nHello!! Your house is wonderful\n</code></pre> <p>As shown above, after using the Nano editor, 'cat' was used to verify that note.txt was successfully changed.</p> <p>As an optional addition to the activity, this segment navigates to a hidden directory into the house and reveals the contents of a hidden message:</p> <pre><code>ubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house$ cd .hidden_basement\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/.hidden_basement$ ls -a\n.   ..    .hidden_stash\n\nubuntu@ubuntu:~/Documents/CK-Building-Content-Knowledge-Workshop/Unit 1 Activity\n- House Exploration/house/.hidden_basement$ cat .hidden_stash\nCongratulations! Put 'I won the game!' in chat to confirm how much of a winner\nyou are!\n</code></pre> <p>As the hidden message says: I won the game!</p>"},{"location":"networking/assignment2/#reflection-and-analysis","title":"Reflection and Analysis","text":"<p>Through the Command Line Interface activity, basic navigation through a command line interface, specifically on a Linux Ubuntu virtual machine, was learned. Specifically, students learned how to create, modify, and remove files, as well as navigate through directories via absolute and relative pathing. The knowledge of navigation was also applied to multiple activities, providing a simpler version of real-world navigation through directories. This activity was quite difficult compared to file navigation with a GUI since the only means that could be used to navigate and look were commands and their respective outputs. However, training to use a command line fo navigation can especially help in the business world, as a user interface may provide security issues in a company or be too resource-heavy for systems with large amounts of files. Navigating using commands also solidified the ideas learned through diagramming file system trees, allowing them to be applied in more general contexts. Knowledge of the command line interface, can branch out into many different areas, even those outside of Networking. However, the command line interface will be especially useful when learning about protocols and IP addresses in order to obtain information about a system, packets, and other concepts.</p>"},{"location":"networking/assignment3/","title":"Determining Security Controls for Devices","text":""},{"location":"networking/assignment3/#determining-security-controls-for-devices","title":"Determining Security Controls for Devices","text":""},{"location":"networking/assignment3/#project-overview","title":"Project Overview","text":"<p>Problem Statement:</p> <p>Many people are unaware of how to secure their data, as well as possible threats which could pose a threat to their security and information. This activity provides an explanation of how the user can secure their devices effectively and the types of attacks to be aware of.</p> <p>Objectives:</p> <ul> <li>Learn the CIA triad and how to keep information safe</li> <li>Compare current software versions with their latest updates, and update them to their latest versions</li> <li>Know common device vulnerabilities to look out for</li> <li>Know common social engineering attacks which malicious actors use</li> <li>Know how to defend from both device vulnerabilities and social engineering attacks</li> </ul> <p>Success Criteria:</p> <p>Fill out a guided note document to retain the knowledge of cyberattacks and defenses, update outdated software, and manage security controls and possible vulnerabilities in an Ubuntu virtual machine.</p>"},{"location":"networking/assignment3/#design-planning","title":"Design &amp; Planning","text":""},{"location":"networking/assignment3/#cybersecurity-basics-for-devices-guided-notes","title":"Cybersecurity Basics for Devices (Guided Notes)","text":"<p>These notes primarily cover three topics: the CIA triad, common device vulnerabilities, and social engineering attacks.</p> <p>The CIA Triad</p> <p>The CIA triad is an acronym which is defined as follows:</p> <ul> <li>Confidentiality - keeping information inaccessible to those who should not see it</li> <li>Integrity - keep information acurate and trustworthy</li> <li>Availability - allow information to be accessed when necessary</li> </ul> <p>Here are some examples of where each of these are expressed:</p> <ul> <li>Confidentiality is provided mainly through encryption of data, which prevents it from being interpreted without a key.</li> <li>Integrity is maintained via backup files and preventing users from tampering with them.</li> <li>Availability matters when specific people need access to data, suich as a test administered by the College Board.</li> </ul> <p>CIA is very important for assessing the security of a device or network, and it can help to ensure that data remains safe.</p> <p>Common Device Vulnerabilities</p> <p>These are some examples of common device vulnerabilities and why they matter:</p> <ul> <li>Outdated Operating System: If a vulnerability or incompatibility is discovered in an operating system, people may try to take advantage of that vulnerability and access one's device</li> <li>Unencrypted Data: If data is accessed, it is able to be interpreted without any trouble by those who shouldn't see it</li> <li>Weak Passwords: Easy-to-guess or leaked passwords allow for malicious parties to obtain access to one's data without many boundaries</li> <li>Open Ports: Ports allow a device to access the internet, so an open port can allow for someone to remotely access one's operating system</li> <li>Unpatched Software: Similarly to an outdated OS, pplications often release patches for security flaws, and failing to update them could result in a security breach</li> </ul> <p>Overall, the specific vulnerabilities which fall into these categories can be accessed via the public database known as CVE (Common Vulnerabilities and Exposures). This database is very useful for ensuring that vulnerabilities are assigned a unique identifier and are able to be tracked and fixed in an orderly fashion.</p> <p>Social Engineering Attacks</p> <p>Social engineering attacks are mostly a result of user error, and they can often be avoided by being careful of one's data and taking proper measures to check an unverified party's authentication.</p> <p>There are five primary social engineering attacks:</p> <ul> <li>Phishing: Targeting a large and general group of people by attempting to get them to click a malicious link or perform a malicious action</li> <li>Spear Phishing: A subset of phishing which targets a specific set of people (often businesses)</li> <li>Pretexting: Using communication with a user to create an image and gain trust, with the intended purpose of getting the user to allow access</li> <li>Baiting: Offering a reward, either physical or virtual, to a specific person but instead performing another action</li> <li>Tailgating: Entering an open door or insecure location to access a user's device (physical or virtual)</li> </ul> <p>Phishing and Spear Phishing can mostly be prevented by validating the identity of the party who is sending the link/attachment to be opened.</p> <p>Pretexting and tailgating are most effectively prevented by ensuring the identity and authoriztaion given to a person before trusting them with information.</p> <p>Baiting is best prevented by being aware of suspicious or unknown devices and avoiding allowing them to connect to one's own devices.</p>"},{"location":"networking/assignment3/#technical-development","title":"Technical Development","text":""},{"location":"networking/assignment3/#outdated-software","title":"Outdated Software","text":"<p>In this activity, students checked software in an Ubuntu VM to determine whether they were: up to date, outdated, or not installed. Since outdated software can often provide vulnerabilities, it is best to update it to the latest available version.</p> <p>Before checking the versions of the various software, the following commands had to be run to allow the latest versions to be installed if they were not already:</p> <pre><code>sudo apt update -y\nsudo apt upgrade -y\n</code></pre> <p>To actually check the versions of software, the name of the software followed by <code>--version</code> or some variant is usually used:</p> <p></p> <p></p> <p>Below are the results obtained for different software, as well as the possible risks of leaving that software outdated:</p> Software Status Risk OpenSSL Outdated OpenSSL controls encryption, which hides sensitive data Firefox Up To Date The browser's cookies could be accessed, which store user information and passwords LibreOffice Outdated Documents can become corrupted or made public if vulnerable Python Outdated Someone could execute remote commands to perform unwanted actions Apache HTTP Server Not Installed Content accessed on the internet could be redirected maliciously GIMP Not Installed Images could become corrupted or deleted Java Not Installed Remote Java scripts could be executed to perform unwanted actions OpenSSH Outdated An unauthorized party could connect to the device remotely via SSH <p>Note that a piece of software not being installed is more safe than installing it and leaving it out of date because the software's point of contact with the internet is not made until it is installed. Thus, too much unnecessary and unmanaged software could pose the risk of exposing one's device to the broader internet.</p> <p>As shown above, most of the software was outdated. Although this does not have much of an impact on a VM with in-school use, if these software were downloaded on a more important operating system, then these outdated versions could post various risks. Personal data could possibly be compromised, or the system could be corrupted and manipulated such that it could not be restored to a previous available version.</p> <p>To actually update this software, running the software's install command once again usually updates it.</p> <p>For example, Raaj found a method to install the latest version of Java on the virtual machines despite Ubuntu only natively supporting an earlier outdated version. This command is as follows:</p> <p><code>sudo apt install openjdk-21-jdk</code></p> <p>After updating, here is the displayed version, which correlates to the latest available version of the JDK:</p> <p></p>"},{"location":"networking/assignment3/#cybersecurity-basics-for-devices-defenses","title":"Cybersecurity Basics for Devices (Defenses)","text":"<p>Firewalls (UFW)</p> <p>To protect against possible attacks and secure the device, multiple methods can be used. Two defense methods in particular will be shown below: firewalls and encryption (via LUKS).</p> <p>One prominent firewall available on Linux is the UFW (Uncomplicated Firewall), which automatically locks ports deemed unnecessary and allows transportation through open ports.</p> <p>To enable UFW, it must first be installed using <code>sudo apt install ufw -y</code>.</p> <p>Checking the status can be done with <code>sudo ufw status</code>, and the firewall can be enabled via <code>sudo ufw enable</code>.</p> <p>As shown below, the initial status of the firewall is inactive:</p> <p></p> <p>However, after enabling it, the firewall is shown as active.</p> <p></p> <p>The user can then set up rules to block or open certain ports. In this case, the telnet port (23) is very insecure due to lack of encryption, so a rule is created to block it. This can be done using the <code>deny</code> command:</p> <p></p> <p>Another defense, encryption, is covered in the Testing and Evaluation section for this task.</p>"},{"location":"networking/assignment3/#social-engineering-attacksdefenses","title":"Social Engineering Attacks/Defenses","text":"<p>This is an activity done with a partner in which scenarios of breached security (red slips) must be paired with remedies to the respective problems (the green slips).</p> <p></p> <p>After reviewing the slips once again after learning about specific social engineering attacks, the obtained answers were exactly the same as those obtained previously.</p> <p>Interestingly, some attacks did not fall into social engineering, but were rather device vulnerabilities.</p>"},{"location":"networking/assignment3/#testing-evaluation","title":"Testing &amp; Evaluation","text":""},{"location":"networking/assignment3/#outdated-software_1","title":"Outdated Software","text":"<p>While this section was contained in the technical development section, here is a summary of the evaluation of possible vulnerabilities in the virtual machine.</p> Software Status Risk OpenSSL Outdated OpenSSL controls encryption, which hides sensitive data Firefox Up To Date The browser's cookies could be accessed, which store user information and passwords LibreOffice Outdated Documents can become corrupted or made public if vulnerable Python Outdated Someone could execute remote commands to perform unwanted actions Apache HTTP Server Not Installed Content accessed on the internet could be redirected maliciously GIMP Not Installed Images could become corrupted or deleted Java Not Installed Remote Java scripts could be executed to perform unwanted actions OpenSSH Outdated An unauthorized party could connect to the device remotely via SSH <p>More specific information about dealing with outdated software can be found in Technical Development.</p>"},{"location":"networking/assignment3/#cybersecurity-basics-for-devices-interfacesports","title":"Cybersecurity Basics for Devices (Interfaces/Ports)","text":"<p>Network Interfaces</p> <p>It is important to know that Linux has a predictable naming scheme in later versions, which specifies the type of connection, PCI bus, and slot of each interface. An interface is defined as a type of connection that the device makes.</p> <p>For example. <code>enp0s1</code> denotes an ethernet connection of PCI bus 0 at slot 1.</p> <p>The commands shown below obtain the interfaces of the Ubuntu VM and their specific informations:</p> <p></p> <p>Knowing these connections can help the user understand the type of connection to the internet and offers certain solutions for if a vulnerability or problem arises.</p> <p>Examining Ports</p> <p>In bridged mode, the command <code>netstat -tuln</code> or <code>ss -tuln</code> is run to obtain the assigned ports of the Ubuntu virtual machine and their status. Here is the output of running <code>ss -tuln</code>:</p> <p></p> <p>Here are some important takeaways to note about these ports:</p> <ul> <li>Ports set to LISTEN are constantly open to receive and send outside traffic, while ports on UNCONN have a connection but are only opened when time-sensitive information is pushed.</li> <li>The assigning of LISTEN to tcp and UNCONN to udp is natural since tcp always listens for and is available to send data while udp is for quick communications.</li> <li>Certain port numbers are conventionally assigned to particular protocols, as listed below.</li> </ul> <p>Here are some protocols with conventional port numbers present in the VM:</p> <ul> <li>DNS (Port 53) - assigns text names to IP addresses</li> <li>DHCP (68) - obtains an IP from the router/network</li> <li>SSH (22) - allows secure remote connection</li> <li>CUPS (631) - allows printing</li> </ul> <p>Note that of these ports, SSH and CUPS are not entirely necessary for direct use of the VM (usually unused), as they control interactions with remote devices. Thus, they can lead to vulnerabilities if not managed correctly since they allow outside access to the contents of the virtual machine.</p> <p>Encryption (LUKS)</p> <p>Encryption ensures that even if a device is compromised or stolen, its data remains secure.</p> <p>In Linux, a type of encryption called LUKS Encryption is used. To check if it is enabled, the command <code>lsblk -f</code> can be run:</p> <p></p> <p>In the output, the column to keep in mind is FSTYPE, as it shows the type of filesystem used for each disk. It is important to note that the vfat and ext4 filesystems are NOT encrypted, so they leave the device unsecure in the case of it being compromised. For LUKS encryption, the filesystem is denoted crypto_LUKS, which is encrypted. However, as seen above, this filesystem is not present at all in the Ubuntu VM, implying that the disks are not encrypted.</p> <p>This does not pose much of a risk, especially on this classroom VM, since it does not store personal data. However, if one were to use their main computer, then encrypted filesystems like LUKS are essentially necessary, as personal computers often contain sensitive and private information.</p>"},{"location":"networking/assignment3/#reflection-analysis","title":"Reflection &amp; Analysis","text":"<p>Through the Determining Security Controls for Devices activity, students learned possible device vulnerabilities, what those vulnerabilities can compromise, and how to fix them. The basic knowledge of the CIA triad (confidentiality, integrity, and availability) allows for introductory knowledge for classification of both vulnerabilities and what is required for an effective defense against them. Knowledge of social engineering attacks, which take advantage of user error, as well as attacks on software and open ports, defenses were also able to be set up on the Ubuntu virtual machine. The enabling of a firewall to block unused ports, updating outdated software, and checking for LUKS encryption are all various methods which were used to ensure the security and integrity of information. Outside of these examples, many casual device users can apply similar steps to ensure that their data is secure and have an alert mind for any possible attacks on their system. This security can generalize to both at-home users, as well as large corporations, who want to abide by the CIA triad for their data. Using knowledge of possible attacks and defenses, a fitting next step is learning how to compromise systems in order to get both perspectives in an attack. This thinking can be applied when setting up defenses, making it further certain that it is very difficult for attackers to compromise one's system.</p>"},{"location":"networking/assignment4/","title":"Implementing Security for Devices","text":""},{"location":"networking/assignment4/#implementing-security-for-devices","title":"Implementing Security for Devices","text":""},{"location":"networking/assignment4/#project-overview","title":"Project Overview","text":"<p>Problem Statement:</p> <p>Oftentimes, people are unaware of what truly determines the security of a device and how to implement adequate security procedures. This activity details multiple methods which ensure security, such as how to make good passwords, multi-factor authentication, and patching software.</p> <p>Objectives:</p> <ul> <li>Learn how to create a password with large length and adequate complexity, as well as good memorability</li> <li>Learn how to change passwords and set up other means of authentication</li> <li>Know how to patch outdated software and check the specifics of patch history</li> </ul> <p>Success Criteria:</p> <p>In an Ubuntu VM, change the password to an algorithmically designed password, set up an authenticator for MFA, test the authentication requirements of SSH, and patch all software with available updates.</p>"},{"location":"networking/assignment4/#design-planning","title":"Design &amp; Planning","text":""},{"location":"networking/assignment4/#guided-notes","title":"Guided Notes","text":"<p>These notes provide a general overview of the theory behind the activities performed later.</p> <p>Password Management</p> <p>The primary components of a strong password are as follows:</p> <ul> <li>Length - more characters; useful because there are more combinations that a hacker has to try</li> <li>Complexity - mixing character types (e.g. A-Z, 0-9, symbols); useful because there is a broader range of characters for hackers to try</li> <li>Unpredictability - avoiding anything attackers can guess or find (personal information, keyboard patterns, common passwords); can be implemented by using random words or a password manager</li> </ul> <p>To generate a pseudorandom (realistically random) password, the command <code>openssl rand -base64 24</code> can be used. Note that the final argument, 24 represents the amount of bytes to generate, so this can vary based on use case.</p> <ul> <li>12-16 bytes are good for API tokens or short-lived secrets</li> <li>24-32 bytes are good for strong passwords or session tokens</li> <li>43+ bytes are good for cryptographic keys</li> </ul> <p>Weak passwords are susceptible to common attacks, such as the following:</p> <ul> <li>Brute Force - attacker tries all possible combinations until one works; prevented by longer length</li> <li>Dictionary Attack - attacker tries all word lists of common passwords/variants; prevented by unpredictability</li> <li>Credential Stuffing - attacker reuses real username/password pairs stolen from other websites; prevented by having unique passwords for different services</li> </ul> <p>Note that MFA (multi-factor authentication) is always a good backup in the case that a password is compromised.</p> <p>NIST/OWASP Guidelines</p> <p>Below are the primary guidelines for NIST and OWASP, two accredited organizations.</p> <p>NIST (National Institute of Standards and Technology):</p> <ul> <li>Length over complexity</li> <li>Screen out bad passwords (done by the service)</li> <li>Reasonable limits (usually 64 characters)</li> <li>MFA</li> </ul> <p>OWASP (Open Worldwide Applications Security Projects):</p> <ul> <li>Authentication cheat sheet</li> <li>Password storage cheat sheet</li> <li>Recognize credential stuffing</li> </ul> <p>The most major difference between these two is that OWASP prioritizes very great security in cheat sheets/password managers (which usually follows complexity), while NIST is more focused on password length.</p> <p>Multi-Factor Authentication (MFA)</p> <p>There are three major types of authentication:</p> <ul> <li>Single-factor (e.g. password only); very weak</li> <li>Two-factor (e.g. password and email); stronger</li> <li>Multi-factor (any combination of authentication); strongest</li> </ul> <p>Note that in most cases of multi-factor authentication, deciding how many factors are reasonable is based on the user's individual security trade off. It must be decided how to balance convenience and security.</p> <p>Software Patching and Updates</p> <p>Patches are updates in software to fix bugs, which are very useful because they remove known 'holes' which attackers can breach.</p> <p>Below is some useful terminology when dealing with patches:</p> <ul> <li>Vulnerability - weakness in software/hardware</li> <li>Exploit - code/action that takes advantage of a vulnerability</li> <li>Zero-Day - a flaw which hackers discover before developers are aware of it</li> <li>In the Wild - an exploit actively being used by hackers in real life</li> </ul> <p>There are two major ways to update software, those being automatic and manual.</p> <p>| Type | Description | Pros | Cons| | ------ | ------ | ------ | | Automatic | Installs patches on its own | Easy and fast; keeps user protected | The user may not want to update the software | | Manual | User/IT installs patches | Can be done as often as necessary | Easy to forget |</p> <p>End-to-End Thinking</p> <p>End-to-end security entails protecting every step in the digital process, from account creation to every login, update, and communication. This is an ideal standard.</p> <p>Here is an example of end-to-end security in the context of a user's account:</p> Stage What Happens Steps to Secure Account Creation User chooses username/password Require strong passwords and block weak ones; confirm identity Login Process System checks user credentials Use MFA During Use Data is transferred between the user and server Encryption (HTTPS, SSL) Software and Devices Apps, browsers, and OS continuously run Make sure apps are updated Recovery and Reset User forgets password or loses device Verify with backup email (or other authentication) codes"},{"location":"networking/assignment4/#password-algorithm-design","title":"Password Algorithm Design","text":"<p>Using the concepts of length, unpredictability, and uniqueness, a memorable password algorithm was created. Note that this password primarily focuses on length over complexity, as is heavily emphasized by NIST's password guidelines.</p> <p>Here is the algorithm:</p> <ol> <li>Add '!!' at the start of the password.</li> <li>Take the name of the service or website used and reverse it.<ol> <li>Take the reversed name and remove every other letter/character, starting with the second one (e.g. Amazon -&gt; nozamA -&gt; nzm).</li> <li>Set every letter to lowercase.</li> </ol> </li> <li>If the service name starts with a vowel, take the string \"XaZ\". Else, take the string 'CfC'.</li> <li>Take the strings obtained in (2) and (3). Starting with the one obtained in (2), interweave the letters of each string, alternating from (2) to (3). (e.g. 'nzm' + 'XaZ' = 'nXzamZ'). Append this to the password.</li> <li>Append the string 'LemonadeDollarSign$$' to the end of the password.</li> <li>Final output should look similar to '!!nXzamZLemonadeDollarSign$$'.</li> </ol> <p>Pros and Cons of the Algorithm</p> <p>Pros:</p> <ul> <li>This algorithm is very easily memorizable and applied, so it can work with a variety of services.</li> <li>The password produced is fairly long, which helps against brute force.</li> </ul> <p>Cons:</p> <ul> <li>The strings like 'XaZ' can be changed to something more personal to the user. The same applies to other parts.</li> <li>If a hacker recognizes the pattern in a compromised password, then they can brute force the minimum 6 characters of the string generated from (2) and (3).</li> </ul> <p>Algorithm Comparison</p> <p>When comparing algorithms between peers, the agreed-upon best password showed both length and complexity. It obtained complexity through inserting the name of the user's favorite algae (which also provided length due to the long nature of scientific names). Overall, the password algorithm is very unpredictable and unlikely to be compromised.</p>"},{"location":"networking/assignment4/#technical-development","title":"Technical Development","text":""},{"location":"networking/assignment4/#changing-the-default-password-in-the-ubuntu-vm","title":"Changing the Default Password in the Ubuntu VM","text":"<p>This segment involves:</p> <ol> <li>Setting a new password for the ubuntu superuser</li> <li>Creating a new account on the Ubuntu VM</li> <li>Changing the new account's password</li> <li>Locking the ubuntu account for security</li> </ol> <p>Changing the Ubuntu Password</p> <p>On a normal user's operating system, doing similar steps is very important because oftentimes, the superuser has a predictable or default password which is often unconfigured. Thus, setting one's own username and password allows for only specified users to obtain administrator privileges.</p> <p>When the Ubuntu VM was first created, the default credentials were the username ubuntu, and the password ubuntu, which is very unsecure.</p> <p>To change the password for ubuntu, the <code>passwd</code> command was used.</p> <p>After entering the current password, a new password was then set successfully (note that it cannot be seen for security reasons).</p> <p></p> <p>Configuring a New User</p> <p>To create the new account on the VM, the command <code>sudo adduser \\[USERNAME\\]</code> was run.</p> <p>Afterwards, the command <code>sudo usermod -aG sudo [USERNAME]</code> was run to allow administrator privileges to the newly created account.</p> <p>Here is the result of running both commands:</p> <p></p> <p>Locking Ubuntu for Security</p> <p>It is helpful to lock the ubuntu account since its credentials are often predictable. Most of the time, when the administrator account is still accessible, it has a predictable password such as ubuntu or admin. To do so on Ubuntu, <code>sudo passwd -l ubuntu</code> is used:</p> <p></p>"},{"location":"networking/assignment4/#enabling-mfa-in-the-ubuntu-vm","title":"Enabling MFA in the Ubuntu VM","text":"<p>To confirm that the created user (connor) has superuser permissions, <code>sudo ls /</code> was run:</p> <p></p> <p>To download the tools for authentication (specifically Google), <code>sudo apt update</code> and <code>sudo apt install libpam-google-authenticator -y</code> were run.</p> <p>Then, to use the authenticator, the command <code>google-authenticator</code> was used, ultimately resulting in the generation of a secret key, as well as a QR code storing that secret key for the system.</p> <p></p> <p>Note that the secret key is used to generate a 6-digit code which changes every 30 seconds, known as a time-based one-time password (TOTP). These are very difficult to guess because of rate limiting and the password resetting every 30 seconds.</p> <p>To simulate the TOTP, this website was used. As shown below, a 6 digit code was generated:</p> <p></p> <p>NOTE: IN PRACTICE, DO NOT SHOW THE SECRET KEY TO ANYONE. THIS IS A CLASSROOM SIMULATION, AND THIS IS PURELY SHOWN FOR DOCUMENTATION PURPOSES.</p> <p>When running <code>google-authenticator</code> once again, the 6 digit code was inserted, and MFA was successfully established:</p> <p></p> <p>The authenticator's use in verifying user identity for SSH can be found in Testing &amp; Evaluation.</p>"},{"location":"networking/assignment4/#patching-ubuntu","title":"Patching Ubuntu","text":"<p>This section details the process of patching software in the Ubuntu VM.</p> <p>To check for available software updates, it is recommended to run <code>sudo apt update</code> every time a Linux operating system is used.</p> <p>Next, to see what software has available updates, <code>sudo apt list --upgradable</code> is used. As shown below, there were very many packages (37) which could be updated.</p> <p></p> <p>To actually perform the upgrades on the desired software, the command <code>sudo apt upgrade</code> is executed. Note that after performing the upgrade command, a record of the upgrade is appended to the history.log file, which can be found under <code>/var/log/apt/history.log</code>. However, this file has much content and is thus hard to navigate, so it is useful to search for important keywords using the grep command.</p> <p>This most recent upgrade was executed on October 13th, so it can be confirmed that an upgrade did happen on that day by using <code>grep \"2025-10-13\" /var/log/apt/history.log</code>:</p> <p></p> <p>Displayed above, the upgrade took approximately 1 minute.</p> <p>Similarly, updates on other dates can also be viewed:</p> <p></p> <p>To interpret the data in the history.log file, see the respective section in Testing &amp; Evaluation.</p> <p>Automatic Updates</p> <p>To see the last couple of automatic updates performed, <code>ls -l /var/lib/apt/periodic</code> can be executed:</p> <p></p> <p>It is generally nice to have automatic system updates in the background, but also allow the user to update them whenever they want. Specific packages that may function differently can be scheduled to be updated purely manually, while others can be on an automatic update schedule, with the user being allowed to perform additional updates.</p>"},{"location":"networking/assignment4/#testing-evaluation","title":"Testing &amp; Evaluation","text":""},{"location":"networking/assignment4/#changing-the-default-password-in-the-ubuntu-vm_1","title":"Changing the Default Password in the Ubuntu VM","text":"<p>To test if the user's password was actually changed, a command requiring admin privileges (using <code>sudo</code>) was run. The new password worked successfully.</p> <p></p> <p>Furthermore, to confirm that the ubuntu account was actually locked after the new user account was created, the user account simply had to be logged out.</p> <p>As shown below, the ubuntu account cannot be accessed:</p> <p></p>"},{"location":"networking/assignment4/#enabling-mfa-in-the-ubuntu-vm_1","title":"Enabling MFA in the Ubuntu VM","text":"<p>Enabling MFA for SSH</p> <p>To enable MFA in establishing SSH connections, <code>sudo nano /etc/ssh/sshd_config</code> was run, and KbdInteractiveAuthentication was enabled. Note that for additional password verification, PasswordAuthentication must also be enabled.</p> <p></p> <p>Next, to add the authenticator to SSH verification, <code>sudo nano/etc/pam.d/sshd</code> was run, and authenticator verification was required by inserting <code>auth required pam_google_authenticator.so</code>.</p> <p></p> <p>Note that SSH has to be reset after this using <code>sudo systemctl restart ssh</code>.</p> <p>Finally, to test the password and authenticator MFA when using ssh, <code>ssh [USERNAME]@localhost</code> was used to establish a remote connection. As shown below, this first required a verification code, then the user's password, so the MFA was successful.</p> <p></p>"},{"location":"networking/assignment4/#patching-ubuntu_1","title":"Patching Ubuntu","text":"<p>Summarizing Information</p> <p>Since there is very much information stored in history.log, it is best to filter or summarize this data.</p> <p>Every package which is newly installed or updated is listed in lines starting with \"Install:\". Hence, <code>grep \"Install:\" /var/log/apt/history.log</code> is used to list only the installs performed.</p> <p>Shown below are a couple of the updates performed, including package name and version:</p> <p></p> <p>Using knowledge of the command line interface, adding <code>| wc -l</code> to the previous command finds how many installation events occurred (not necessary individual installs since there are dependencies as well).</p> <p></p> <p>Another method to summarize the information is to view the most recent change and its contents. This can be done via <code>grep -A 2 \"Start-Date\" /var/log/apt/history.log | tail -n 10</code>.</p> <p>As shown below, the start date and command which was run are listed:</p> <p></p> <p>To summarize updates centered around a specific package, the <code>grep</code> command with the package as an argument is used.</p> <p>Here is the output when looking for nano and firefox respectively:</p> <p></p> <p></p> <p>Note that firefox was very hard to find, as it was updated along with multiple other dependencies.</p> <p>Here is another example with the <code>google-authenticator</code> package, which was installed for the MFA activity:</p> <p></p> <p>Checking the Latest Update Activity</p> <p>Since the latest update activity usually appears in the last lines, the <code>tail</code> command for the last 20 lines should encapsulate most of the desired activity.</p> <p>This command displayed the start date, command run, end date, and all of the packages which were installed or upgraded.</p> <p></p> <p>Importance of Patching and Understanding Patches</p> <p>Unpatched packages are a major risk because if there is a vulnerability or a deprecated portion of the package, then these components may be compromised. This can cause the package to act as a tool to perform malicious actions or function as a gateway into a user's operating system.</p> <p>If these packages are connected to the internet, then the user's system will be exposed whenever making a connection via that service.</p> <p>To show the relevance of patching, a specific package was chosen from the updates performed on October 13th, curl. Here are some important functionalities of this package:</p> <ul> <li>Transfers data both to and from servers</li> <li>Can download files</li> <li>Interacts with HTTP, HTTPS, and FTP</li> <li>Often used for testing APIs</li> <li>Works from almost any device</li> </ul> <p>Thus, if curl is compromised, then a hacker could easily send dangerous files to the operating system, as well as obtain a user's data by transferring the user's data to the server.</p> <p>Considering the scenario where an Ubuntu VM is connected to the internet and used as a real computer for a small business/hospital:</p> <p>If the VM is never patched or updated, then vulnerabilities documented to have been fixed in later patches could be used as vantage points for hackers to gain access to the Ubuntu OS. Thus, the sensitive business data (in the case of a business) or patient information (in the case of a hospital) can be obtained and possibly used as blackmail against the company, which is very problematic. Hackers can often use exploits in the wild to deal major harm to the company as a whole. Note that even if software is up-to-date, there is always the risk of a zero-day vulnerability, as the developers of the software themselves do not know the vulnerability exists while it is being utilized in the wild. To ensure maximum security, automatic updates are very useful, since people often forget to update packages manually. These often resolve known vulnerabilities.</p>"},{"location":"networking/assignment4/#reflection-analysis","title":"Reflection &amp; Analysis","text":"<p>Through the Implementing Security for Devices activity, students learned the basics of authentication, how to develop effective passwords, the importance of MFA, how to patch, and applied those skills in an Ubuntu virtual machine. Starting with knowledge of password strength, primarily the tenets of length, complexity, and unpredictability, allowed for acquaintance with single-factor authentication. NIST's and OWASP's differing interpretations on password length also helped for a more specific understanding of what constitutes a good password. Extending this to multi-factor authentication using an authenticator and a respective secret key allowed for the security of a strong password to be further built upon, as a new layer of security was added. Strong password development and MFA are very useful to have in the real world, as so often, users have only one means of verification (password), and passwords are often weak and vulnerable to common exploits. In the context of large businesses, strong authentication procedures are especially necessary. The activity in which Ubuntu packages were patched highlights just how many packages can become outdated within a very short span of time, thus emphasizing the importance of regular updates to avoid vulnerabilities. Similarly to strong authentication, regular patches are also a necessity for both common users and businesses in the real world. Vulnerabilities in patches, especially those connecting to the internet, can provide easy access to a user's personal and sensitive data. A reasonable next step after implementing security controls is testing in a lab scenario how weak security can be compromised. Although claiming to be a false identity (through bypassing authentication) is unethical, it is still useful to understand how people may do this in order to fight against those who perform these exploits in the wild. Password and authentication standards are necessary to educate people on in any setting, and wide-spread means to secure users would be very effective at combatting exploits as a whole.</p>"},{"location":"networking/assignment5/","title":"Data Movement and Types of Networks","text":""},{"location":"networking/assignment5/#data-movement-and-types-of-networks","title":"Data Movement and Types of Networks","text":""},{"location":"networking/assignment5/#project-overview","title":"Project Overview","text":"<p>Problem Statement:</p> <p>INSERT</p> <p>Objectives:</p> <p>INSERT</p> <p>Success Criteria:</p> <p>INSERT</p>"},{"location":"networking/assignment5/#design-planning","title":"Design &amp; Planning","text":""},{"location":"networking/assignment5/#data-movement-notes","title":"Data Movement Notes","text":"<p>LAN</p> Term Definition Additional Notes LAN (Local Area Network) A network that connects computers and devices within one building/campus Lets devices share printers, files, internet connections, etc. efficiently Host Device that can send or receive data on the network Has unique IP address Switch Connects multiple devices inside the LAN Learns the address of each device plugged in; fowards data to only the intended device Router Connects LAN to other networks Uses IP addresses to decide destination Packet Data travels in chunks called packets Contain sender's IP (return address), receiver's IP (destination), payload (data transmitted) IP Address Identifies each device on a network Unique for each device <p>Number Bases and Applications</p> <p>Binary is useful because:</p> <ul> <li>All digital data is transmitted through binary/base 2</li> <li>Computer signals are either on or off, represented by 1 or 0 respectively</li> <li>On/off signals can store IP addresses, MAC (hardware) addresses, and packets</li> </ul> <p>Binary:</p> <ul> <li>Each binary digit is a bit</li> <li>8 bits = 1 byte</li> <li>4 bits = nibble</li> </ul> <p>IP addresses:</p> <ul> <li>E.g. 192.168.1.1</li> <li>Each division is an octet</li> <li>Each octet is 8 bits = 1 byte</li> <li>4 bytes total</li> <li>192.8.1.1 to binary: 11000000.00001000.00000001.00000001</li> </ul> <p>Hexadecimal:</p> <ul> <li>Base 16</li> <li>Each hex digit = 4 bits, so you can split a binary string into sets of 4 to easily convert</li> <li>Shorthand way to read a long binary string</li> </ul> <p>Practice Conversions</p> Denary Binary Hex 0 0 0 1 1 1 2 10 2 3 11 3 4 100 4 5 101 5 6 110 6 7 111 7 8 1000 8 9 1001 9 10 1010 A 11 1011 B 12 1100 C 13 1101 D 14 1110 E 15 1111 F 16 10000 10 <p>Note that binary was given, and decimal and hex were found:</p> Binary Decimal Hex 11001000 200 C8 101101 45 2D 00001100 12 C 10101111 175 AF <p>The entries highlighted in bold were given:</p> Denary Binary Hex 597 1001010101 255 603 1001011011 25B 255 0011111111 FF <p>OSI Model</p> <p>OSI - Open Systems Interconnection</p> <ul> <li>Conceptual framework</li> <li>Each layer has its own job</li> <li>Understanding layers helps troubleshoot</li> <li>Helps understand how computesr talk to each other</li> </ul> Layer Name Description Details 7 Application Email or browser 6 Presentation Translates data (encryption and compression) Ensures that data is in a usable form 5 Session Manages connection Maintains connections; responsible for controlling parts and sessions 4 Transport Breaks data into segments Transmits data using transmission protocols (e.g. TCP, UDP) 3 Network Routes packages using IP Decides which physical path the data will take 2 Data Link Transfers frames via MAC Defines the format of the data on the network 1 Physical Any hardware (e.g. wires, signals, routers) and Wi-Fi Transmits to raw bit streams over a physical medium Step What Happens OSI Layer Write and address message IP address gets formatted for communication Presentation/Application Package is prepared and boxed Data is broken into segments Transport/Network Person at post office sorts it ? Session Delivery truck figures out the best route Routers and switches address routing Network / Data Link Truck drives it down the road Data traveks through the cable fiber or Wi-Fi Physical TCP/IP OSI Functions Application 5-7 Apps, HTTP, FTP Transport 4 TCP/UDP, Segmentation Internet 3 IP Addressing, Routing Network Access 1-2 Physical &amp; Data Link"},{"location":"networking/assignment5/#technical-development","title":"Technical Development","text":"<p>INSERT</p>"},{"location":"networking/assignment5/#testing-and-evaluation","title":"Testing and Evaluation","text":"<p>INSERT</p>"},{"location":"networking/assignment5/#reflection","title":"Reflection","text":"<p>INSERT</p>"}]}